VSpace/FRCodeCmdSubs../seqCmdGrp.txt

package edu.wpi.first.wpilibj.examples.hatchbottraditional.commands;
from wpilib docs
import edu.wpi.first.wpilibj.examples.hatchbottraditional.Constants.AutoConstants;
import edu.wpi.first.wpilibj.examples.hatchbottraditional.subsystems.DriveSubsystem;
import edu.wpi.first.wpilibj.examples.hatchbottraditional.subsystems.HatchSubsystem;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;

/** Complex auto command drives forward, releases hatch, then drives backward.
 */
public class ComplexAuto extends SequentialCommandGroup {
  /**
   * Creates a new ComplexAuto.
   * are params needed if called cmd doesn't need them?
   * @param drive The drive subsystem this command will run on
   * @param hatch The hatch subsystem this command will run on
   */
  public ComplexAuto(DriveSubsystem drive, HatchSubsystem hatch) {
    addCommands(
	// Drive forward the specified distance
	new DriveDistance(
		AutoConstants.kAutoDriveDistanceInches, AutoConstants.kAutoDriveSpeed, drive),
	// Release the hatch
	new ReleaseHatch(hatch),
	// Drive backward the specified distance
	new DriveDistance(
		AutoConstants.kAutoBackupDistanceInches, -AutoConstants.kAutoDriveSpeed, drive));
  }
}

  // A complex auto Command that drives forward, drops a hatch, then 
  // drives backward -- Trad hatchbot FRC example, instance in RC body,
  private final Command m_complexAuto = new ComplexAuto(m_robotDrive, m_hatchSubsystem);
 called in constructor
    // Add commands above to the auto command chooser (DS?, smtDash, shufflbd)
    m_chooser.addOption("Simple Auto", m_simpleAuto);
    m_chooser.addOption("Complex Auto", m_complexAuto);

--------------------------------------
maybe more simply as in Sun video #5's RC body after constructor, on the fly cmd

  //... when Auto_ Mode activated Robot.auto_Init() calls this method using its
// RC class instance and schedules cmd it receives
   public Command getAutonomousCommand() {
      return new SequentialCommandGroup(new DriveForwardCmd(m_driveSubsystem,//
         DriveConstants.kAutoDriveForwardDistance), new ParallelCommandGroup //
           (new IntakeSetCmd(m_intakeSubsystem, false), new ElevatorPIDCmd //
         (m_elevatorSubsystem, ElevatorConstants.kRaisedPosition)) //
             // end parallel group
      ); // end sequential group
   } // end getAutoCmd
   

try for Trad Hatchbot 22 v2 -- to edit/add to R.j body vs. RC ?
-- things done usually in RC now done in R.j's robot.init(), autoInit -->

in R.j body ? or r.init (v. flatbotArcade v2)
  //... when Auto_ Mode activated Robot.auto_Init() call selected cmd using its
    // instance from here and schedules cmd it receives
    
    final Command _simpleAuto = new GoToPosition(autoDriveInch);
    final Command _simplePlus = new GoToPosition(autoDriveInch + 24);
    final Command _autoSequence1 = new SequentialCommandGroup(new GoToPosition(autoDriveInch),
      new WaitCommand(3),new Rotate180cmd(14), new WaitCommand(3), 
      new GoToPosition(autoDriveInch + 12); 
      // end sequential group
    // make commands/Rotate()....in that folder
    _autonChooser = new SendableChooser<>();
    _autonChooser.setDefaultOption("simpleAuto", _simpleAuto);
    _autonChooser.addOption("goFarther", _simplePlus);
    _autonChooser.addOption("fwdRotateBak", _autoSequence1);
